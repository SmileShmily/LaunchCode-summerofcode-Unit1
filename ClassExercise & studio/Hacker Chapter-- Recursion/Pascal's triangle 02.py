'''To achieve that spacing, you want every element to be given the same width â€” namely, the width necessary to accommodate the largest number in the triangle.
 The code above can be tweaked to implement that.
 Use a similar technique to ensure that each element is centred within the width allotted to it.'''
def generate_pascals_triangle(rows):
    """ Returns a list of rows of a Pascal's Triangle with how many rows you want """
    triangle = [[1], [1, 1]]
    if rows == 1:
        return triangle[0]
    else:
        for row_number in range(2, rows):
            triangle.append([1]*row_number)
            for number in range(1, row_number):
                triangle[row_number][number] = (triangle[row_number-1][number-1]+triangle[row_number-1][number])
            triangle[row_number].append(1)
        return triangle

def difference_between_rows(row, next_row):
    """ Returns the difference between two rows in the formatted way """
    row_len = 0
    next_row_len = 0
    for number in row:
        string_number = str(number)
        row_len += (len(string_number)+1)
    for number in next_row:
        string_number = str(number)
        next_row_len += (len(string_number)+1)
    return (next_row_len-1) - (row_len-1)

def print_pascals_triangle(triangle):
    """ Prints the Pascal's Triangle previously generated by generate_pascals_triangle in a formatted form """
    largest_element = triangle[-1][len(triangle[-1]) // 2]
    element_width = len(str(largest_element))

    def format_row(row):
        return ' '.join([str(element).center(element_width) for element in row])

    triangle_width = len(format_row(triangle[-1]))
    for row in triangle:
            print(format_row(row).center(triangle_width))

if __name__ == '__main__': #credit to @alexwlchan
    again = 'y'
    while again == 'y':
        rows = int(input('Enter the number of rows you want in your Pascal`s Triangle: '))
        print_pascals_triangle(generate_pascals_triangle(rows))
        again = input('Do it again ? <y/n> ')






